<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"
xmlns:ev="http://www.w3.org/2001/xml-events"
xmlns:w2="http://www.inswave.com/websquare"
xmlns:xf="http://www.w3.org/2002/xforms">
	<head meta_screenId="timer" meta_screenName="로그인 세션 타이머의 Page Common Component">
		<w2:type>COMMON</w2:type>
		<w2:buildDate/>
		<w2:MSA/>
		<xf:model>
			<w2:dataCollection baseNode="map">
			</w2:dataCollection>
			<w2:workflowCollection>
			</w2:workflowCollection>
		</xf:model>
		<w2:layoutInfo>
		</w2:layoutInfo>
		<w2:publicInfo method="scwin.setIdleTime"/>
		<script type="text/javascript" lazy="false"><![CDATA[
scwin.onpageload = function() {
	
};

scwin.setIdleTime = {

	before: 0,
	worker: null,
	popWindow: null,
	isLogout: false,

	start({ _time, showComp: showCompID, jsLoc = $c.sbm.CONTEXT_PATH + '/ui/SP/LoginSessionTimer/idleTimerWorker.js', _msg }) {
		const { unit = 0, max = 10, first = 3, chkInterval = 1 } = _time;
		const showComp = $p.getComponentById(showCompID);

		const createWorker = () => {
			this.worker = new Worker(jsLoc);
			this.worker.postMessage({
				command: 'initialize',
				maxWait: max,
				alarmTime: first,
				interval: 1000,
				chkInterval: chkInterval
			});
			this.worker.onmessage = e => {
				let _vv = e.data.remainTime;
				if (!_vv) {
					_vv = this.before;
				} else {
					this.before = e.data.remainTime;
				}

				const _v = this.convertSecondsToMinutes(_vv);
				showComp.setValue(_v);

				if (e.data === 'showPopup') {
					this.popWindow = this.popup(true, _msg);
				}

				if (this.popWindow && this.popWindow.popupWin && this.popWindow.getWindow().tbx_time) {
					this.popWindow.getWindow().tbx_time.setValue(_v + ' 남았습니다.');
				}

				if (e.data === 'chkSvrRemainTime') {
					this.svr($p, 'getRemainTime');
				}

				if (e.data.remainTime <= 0 && !this.isLogout) {
					console.log('로그아웃 처리!!');
					this.svr($p, 'destroy');
					this.isLogout = true;
				}


			};
		};

		if (window.Worker) {
			createWorker();
		} else {
			console.log('Your browser doesn\'t support web workers.');
		}
	},

	convertSecondsToMinutes(seconds) {
		const minutes = Math.floor(seconds / 60);
		const remainingSeconds = seconds % 60;
		return minutes + "분 " + remainingSeconds + "초";
	},

	continue() {
		this.worker.postMessage('resetTimer');
	},

	stop() {
		this.isLogout = true;
		this.popup(false);
		this.worker.postMessage('stopWorker');
		$c.win.alert("Session이 종료 되었습니다.\n로그인 화면으로 이동하겠습니다.", function(){$c.win.goHome();})
		
	},

	popup(flag, opt) {
		console.log("자동로그아웃 확인창 오픈 시간 : " + $p.getCurrentServerDate("yyyy-MM-dd HH:mm:ss"));

		if (flag) {
			const popId = "idleTimePopup" + (Math.random() * 16).toString().replace(".", "");
			const data = { msgData: opt, id: popId };
			const width = opt.width || 450;
			const height = opt.height || 250;

			const deviceWidth = parseFloat($("body").css("width"));
			const deviceHeight = parseFloat($("body").css("height"));
			let borderSize = 4;
			if (deviceWidth > 0 && width > deviceWidth) {
				width = deviceWidth - borderSize;
			}

			if (deviceHeight > 0 && height > deviceHeight) {
				height = deviceHeight - borderSize;
			}

			const options = {
				id: popId,
				popupName: opt.title || 'idleTimePopup',
				type: "wframePopup",
				width: width + "px",
				height: height + "px",
				top: opt.top || "140px",
				left: opt.left || "500px",
				modal: true,
				dataObject: { type: "json", data, name: "paramData" },
				alwaysOnTop: true,
				useModalStack: true,
				useMaximize: false,
				className: opt.className || "",
				windowDragMove: opt.windowDragMove !== false,
				windowMoveType: opt.windowMoveType || "restrict",
				closeAction: function () {
					let popWin = $p.getPopupWindow(this.id);
					if (popWin.scwin.continue) {
						console.log("연장함!!");
						scwin.setIdleTime.svr($p, 'continue');
					} else {
						console.log('연장 안함!!');
					}
					scwin.setIdleTime.popWindow = null; // 팝업이 닫힌 후 popWindow 초기화
					delete popWin;
					return true;
				},
				popupUrl: "../popup"
			};

			$p.openPopup($c.sbm.CONTEXT_PATH + "/ui/SP/LoginSessionTimer/idleTimeBox.xml", options);

			this.popWindow = $p.getPopup(popId);
			return this.popWindow;
		} else {
			if (this.popWindow) {
				this.popWindow = null;
				this.popWindow.close();
			}
		}
	},

	svr($p, action, opt = {}) {
		console.log("세션 체크 시작 시간 : " + $p.getCurrentServerDate("yyyy-MM-dd HH:mm:ss"));

		const { max = 10 } = opt._time || {};
		const _sOpt = {
			id: "_sbm_" + action + "Submission",
			action: $c.sbm.CONTEXT_PATH + $c.sbm.SERVICE_URL + "/session/" + action,
			method: "post",
			isProcessMsg: false
		};
		const _param = action === 'create' ? { info: { loginId: "100001", ExpireTime: max } } : {};

		$c.sbm.executeDynamic($p, _sOpt, _param).then(e => {
			if (e.responseJSON.rsMsg.statusCode == 'S') {
				console.log(e.responseJSON.rsMsg.statusMsg);
				if (e.responseJSON.TYPE == 'S') {
					this.start(opt);
				} else if (e.responseJSON.TYPE == 'C') {
					this.continue();
				} else if (e.responseJSON.TYPE == 'D') {
					this.stop();
				} else if (e.responseJSON.TYPE == 'R') {
					let rTime = e.responseJSON.remainTime || 99;
					this.sync(rTime);
				}
			}
		});
	},

	sync(_svrRemainTime) {
		this.worker.postMessage({
			command: 'syncTimer',
			svrRemainTime: _svrRemainTime
		});
	}
};
]]></script>
	</head>
	<body ev:onpageload="scwin.onpageload">
	</body>
</html>
